<Classes prefix="" suffix=". %ip%">
  <!--
		AutoDoc rules
		=============
		For each code element, the %name% variable is set to the name of the element (e.g. "UserInfo"
		or "user_info").  The %sName% variable contains this name, converted to a sentence-like format.
		To do this, AtomineerUtils breakes the name into words ("user info") and then uses the
		<WordExpansion> section (below) to expand abbreviations ("user information"). Most of the rules
		below therefore use the %sName% variable, as this provides a cleaner and more consistent input
		for matching.
		
		The rules are made up of XML elements, each of which is a simple command that tries to apply
		text-based matching to variable values (such as a parameter name or type, number of parameters
		for a method, etc). If a match succeeds, an attribute indeicates the descripiotn text to output.
		
		The available commands are:


		<If> command
		Conditionally adds to the output text and/or executes child commands.

		Most attributes in this command are treated as condition tests. The attribute name
		specifies a value relating to the item being documented (e.g its name or type), and the
		attribute value contains one or more tests to apply to it. The tests are separated by commas,
		and can be in the following "simplified wildcard" formats:
			name="#Suffix"			Tests if the item's "name" ends with the given suffix text
			name="Prefix#"			Tests if the item's "name" begins with the given prefix text
			name="Prefix#Suffix"	Tests if the item's "name" is bracketed by the given prefix and suffix text
			name="#Body#"			Tests if the item's "name" contains the given body text within it
			name="Literal"			Tests if the item's "name" exactly matches the given text

		The # wildcards are explicitly matched, so only the above forms are recognised. Where one # is in
		the condition, the text matching the # will be placed into the variable %match:Sentence:LCase%.
		In the case where two # characters are used, the variables %match1% and %match2%.
		Note that # will only match one or more characters.

		You may test if any one of several conditions is met by separating them with commas, as in:
			name="Is#,Are#"
			retType="bool,BOOL"
			name="#EventArgs"
		This is treated as an "OR" operator, i.e. only one of the conditions needs to be true for the If
		to evaluate to true.

		Note that if you specify several different conditions (name="GetIndex" retType="int") then the
		command only evaluates to true if all the conditions are true (i.e. it treats the statement as
		If (name="GetIndex" AND retType="int"). To execute commands if one condition OR the other is
		true, you must use several if statements.

		When the if condition is matched, it can optionally add text to the output description - just
		add the attribute desc="???". The ??? text can contain literal text as well as variables that
		expand to text in a context-sensitive manner. These are written in the form %varName%.
		(See below for details on using variables)

		<If> elements can be nested, and will be executed in order, each (optionally) appending more
		text to the output description, allowing a standard description to be built up from fragments
		(e.g. document a function with extra information if it includes an extra parameter). The
		outer <If> need not have any desc supplied, so you can do several tests before you
		actually add any text to the description.

		Processing will normally stop as soon as a match is found (that is, an If command evaluates
		to true, and it returns non-blank desc="" text). In some cases you may wish several If
		commands to be executed in succession to build up a description in parts. In this case, add
		a continue="yes" attribute to cause processing to continue after the If is matched.
		(When an If command has child elements, the continue occurs automatically into the children)

		Note that If statements are executed in the order they are written, so you must ensure that
		more specific tests are applied before less specific ones (e.g. match "#EventArgs" before "#Args")

		Example
		The following rules will be activated if a method starts with one of the words Is/Are/Should/Can,
		and has a return type of bool or BOOL. If this is matched, a description is added, prepended
		with [in,out] for ref/reference/pointer variables, and [out] for "out" parameters.

		<If name="Is#,Are#,Should#,Can#" type="bool#">
			<If type="#ref#,#*#,#&#"	desc="[in,out] " />
			<If type="#out#"			desc="[out] " />
			<If desc="true if %match:Sentence:LCase%, false if not" />
		</If>


		<IfNot> command
		This is identical in operation to the <If> command, except that the contents of the command
		are executed only if the condition evaluates to false (rather than true).


		<Set> command
		This is identical to the <If> command, but is used with the desc="" attribute only.
		This allows you to unconditionally set a description (usually as the last case in a nested If).
		e.g
			<If name="Equals">
				<If numArgs="1"	desc="Specific description for numArgs=1 case"/>
				<Set			desc="Catch-all description for all other cases"/>
			</If>


		Autodoc variables
		=================
		Variables may be inserted in the desc="" text to insert special text into the output. Each
		variable is delimited by % characters (use %% to insert a literal % symbol). Any variable
		(except %ip%) can be used as many times as you like within a description.
						
		The following commands are defined:

		%ip%			Insertion Point. The place where the cursor will be left after the comment
						is inserted. Use only one %ip% in any doc comment.
		%match%			For wildcard matches, the %match% command inserts the text that matched
						the wildcard. (In cases involving two wildcards, the variables %match1%
						and %match2% are used).
		%???%			Depending on the context, more variables will exist. In most cases "name"
						will return the full name of the code element being documented, and "sname"
						will return it in sentence form (with spaces between words, and abbreviated
						words expanded to their full name), but some contexts will provide much more
						information - For example, Methods provide %name%, %sname%, %retType%,
						%numArgs%, %argName1%, %argType1% ...

		Variables that insert text can have additional processing commands applied to that text.
		Each command is of the form ":command", and you can append as many commands as you like.
		e.g. "%match:Sentence:StripLastWord:SCase:Plural" would have the effect of converting the
		name "DivideByZeroException" into the text "Divide by zeroes".

		The available commands are:
		(no suffix)			Use the text verbatim
								- DivideByZeroException
		:Sentence			Insert spaces between words, retaining existing capitalisation
								- Divide By Zero Exception
							Conversion to sentence form also expands any abbreviated words,
								e.g. InfoMgr -> Information Manager
		:FirstWord			The first word of the text
								- Divide
		:LastWord			The last word of the text
								- Exception
		:StripFirstWord		Everything except the first word
								- ByZeroException
		:StripLastWord		Everything except the last word
								- DivideByZero
		:LCase				lowercase the text
								- dividebyzeroexception
		:UCase				uppercase the text
								- DIVIDEBYZEROEXCEPTION
		:SCase				sentence-case the text (uppercase the first character, lowercase the rest)
								- Dividebyzeroexception
		:Plural				attempts to pluralise a word. This will give results like:
								"square -> squares, box -> boxes, party -> parties, goose -> gooses"
								- DivideByZeroExceptions

		Most of these commands are of little use on their own, but once combined with Sentence,
		can produce much more useful or readable text output.
		
		Special handling for better quality output
		==========================================
		The following special handling is provided to improve the quality of autodoc output. These
		methods use heuristics to detect and correct the English, which do not always succeed, but do
		improve the output text in the majority of cases:
			+ :Plural command can be used to attempt to pluralise a word as it is expanded.
					e.g. "Box" -> "Boxes"

			+ Any text that has the word "a" in it is processed to replace the "a" with "an" or "the"
					e.g. "Report a warning"		-> "Report a warning"
						 "Report a error"		-> "Report an error"
						 "Report a warnings"	-> "Report the warnings"
						 "Report a errors"		-> "Report the errors"
		-->
			<!-- Rules for auto-documentation of classes
				 Additional values that can be used for filtering/documenting include:
					name			The name of the class
					sName			The name of the class, converted to sentence (space separated words) format, with abbreviated words expanded
					sNameRaw		The name of the class without any prefix letters removed, converted to sentence
					numBases		The number of base classes/interfaces this class imherits from/implements
					baseNameX		Base class/interface name, where X is the 1-based index of the base (e.g. baseName1, baseName2)
			 -->
			<If sName="# editing form,# editor form,# editing dialog,# editor dialog,# editing window,# editor window,# editing pane,# editor pane" desc="%name:LastWord:SCase% for editing the %match%" />
			<If sName="# editor,# designer" desc="%name:LastWord:SCase% for %match%" />
			<If sName="# form,# dialog,# window,# pane,# panel,# wizard">
				<If sName="Set#" desc="%name:LastWord:SCase% for setting the %match:StripLastWord:Sentence:LCase%" />
				<If sName="Create#" desc="%name:LastWord:SCase% for creating %match:StripLastWord:Sentence:Plural:LCase%" />
				<If sName="Edit#" desc="%name:LastWord:SCase% for editing the %match:StripLastWord:Sentence:LCase%" />
				<If sName="Report#,Display#,Show#" desc="%name:LastWord:SCase% for reporting information to the user" />
				<If sName="Error#,Problem#" desc="%name:LastWord:SCase% for reporting errors to the user" />
				<If sName="Warning#" desc="%name:LastWord:SCase% for reporting warnings to the user" />
				<If sName="Progress#" desc="%name:LastWord:SCase% for reporting task progress" />
			</If>
			<If name="#Form,#Window" desc="Form for viewing the %match:Sentence:LCase%" />
			<If sName="# Dialog,# Wizard" desc="%name:LastWord:SCase% for setting the %match:Sentence:LCase%" />
			<If name="#Pane,#Panel" desc="%name:LastWord:SCase% for editing the %match:Sentence:LCase%" />
			<If name="#EventArgs" desc="Additional information for %match:Sentence:LCase% events" />
			<If sName="# Arguments" desc="Arguments for %match:Sentence:LCase%" />
			<If sName="# Attribute" desc="Attribute for %match:Sentence:LCase%" />
			<If sName="# Exception" desc="Exception for signalling %match:Sentence:LCase% errors" />
			<If name="#Permission" desc="%match:Sentence:LCase% permission descriptor" />
			<If sName="# Collection" desc="Collection of %match:Sentence:LCase:Plural%" />
			<If name="#List" desc="List of %match:Sentence:LCase:Plural%" />
			<If name="#Queue" desc="Queue of %match:Sentence:LCase:Plural%" />
			<If name="#Stack" desc="Stack of %match:Sentence:LCase:Plural%" />
			<If sName="# Dictionary" desc="Dictionary of %match:Sentence:LCase:Plural%" />
			<If sName="# Manager" desc="Manager for %match:Sentence:LCase:Plural%" />
			<If sName="# Information" desc="Information about the %match:Sentence:LCase%" />
			<If sName="# Manifest" desc="A list of the %match:Sentence:LCase%" />
			<If sName="# Description" desc="Description of the %match:Sentence:LCase%" />
			<If sName="# Buffer" desc="Buffer for %match:Sentence:LCase%" />

			<If sName="# information,# description" desc="Information describing a %match:Sentence:LCase%" />

			<!-- Catch-all. Just converts the element name into a sentence format -->
			<Set desc="%sname:SCase%" />
		</Classes>