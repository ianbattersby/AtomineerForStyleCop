<DoxygenTemplates>
		<!--
			Templates for Doxygen Comment blocks
			====================================
			These control which entries are added to the comment, and their order, for each type
			of comment block that can be generated by AtomineerUtils.
			
			There are two sets of templates, for DocXml and Doxygen formats respectively.
			This block holds the Doxygen templates.

			The types that can be independently templated are:
				file
				file-footer
				namespace
				enum, bitfield
				struct, class, interface
				method, property, indexer, delegate, constructor, destructor (c++), finaliser (c#), operator, eventhandler, eventsender

			If no template is supplied for a type, a default AtomineerUtils layout will be used.

			AtomineerUtils builds content for the most common entries for you. Use the following empty
			Xml elements as markers to indicate where these entries (if non-empty) should be placed in
			the comment:

				<prototype/> <summary/> <date/> <user/> <exception/> <param/> <returns/> <value/>.

			Note that for compatibility with DocXml templates, the following names are used when
			actually referring to Doxygen commands/entries:
				<prototype/>	the prototype command for the code element (\fn, \enum, \class, \struct, etc)
				<summary/>		the \brief entry

			Remove or comment out any element to suppress it in the doc-comment.

			Note that <param/> is a placeholder for any parameters or generic/template type parameters, and
			can be used for classes and interfaces as well as methods.

			The special element <_/> adds a blank line between entries (note that using this tag
			*within* an entry simply adds "<_>" to the output comment. Instead, use newlines in an
			entry to add newlines to the output comment - but note that these may still be removed
			by the word wrap feature). Multiple blank lines will be merged.

			Any element containing attributes (other than the special ones listed below) or content
			will be simply copied into the doc comment, allowing you to add custom tags or override
			the output of the auto-generated text provided by AtomineerUtils.

			Variables
			=========
			Variables (see below) can be included with the %varName% syntax.

			Special attributes
			==================
			Special attributes can be added to control the output of each element individually:
				_wordwrap="true"	true  = (default) If the word wrapping preference is enabled
											word-wrap the text in this element.
									false = Ignore the preference and disable word-wrap in this
											element.
				_punctuate="true"	true  = (default) Add punctuation at the end of the element
											if it does not appear to end in punctuation.
									false = Do not add any additional punctuation.
				_verbatim="true"	true  = Copy the text from this element verbatim (no word
											wrap, no punctuation, no header on each line, etc)
									false = (default) Format the text from this element, using
											line headers and word wrap as configured.
				_optional="false"	true  =	This entry is "legal", and should be formatted to
											the given position in the final doc comment, but
											should not be added by AtomineerUtils if it is
											missing.
									false =	(default) This entry should be added by
									AtomineerUtils if it is not present.
				_blankEntry="text"	In the case of auto-generated entries such as param, returns
									and exception, the standard is to have no entries if there are
									no params/exceptions to document. However, some companies
									require that an entry is retained, as in <param>None</param>
									If you specify a _blankEntry, this text will be used to
									create an entry in these circumstances.

			Hint: Adding "TODO" items to the Visual Studio Task List window
			===============================================================
			You can add TODO, HACK, UNDONE entries to be displayed automatically in the Visual
			Studio Task Window. However, there are some limitations:
			
			C#:
				Visual Studio doesn't recognise task comments that directly follow an XML start
				tag, so you must place the TODO on a blank line:
					<remarks>
						TODO: Don't forget to fill in the remarks!
					</remarks>

			C++:
				Visual Studio completely ignores task comments inside DocXml /// blocks.
				You must use the _verbatim="true" tag to emit a normal comment into the
				DocXml block:
					<remarks _verbatim="true">
						// TODO: Don't forget to fill in the remarks!
					</remarks>
			

			Examples
			========
				<summary>							Place the summary first, using AtomineerUtils-generated content 
				<remarks> No comment </remarks>		Place remarks next, containing the text "No comment"
				<_/>								Add a blank line
				<info author="%user%"/>				Add entry:	<info author="Jason Williams"/>
				<author> %user% </author>			Add entry:	<author> Jason Williams </author>

			Note:
			The file template is different from regular comment blocks because you aren't documenting
			a code element. AtomineerUtils offers two options:
			1) If this template includes any embedded XML elements, it will be treated as a regular
			   XML Documentation comment, and will thus take on the separators and other style
			   configured for your comments.
			2) If there are no embedded XML elements, this template is treated as a block of freeform
			   text - WYSIWYG.

			In both cases, you can insert any global variables or the following special variables:
				%fileDesc%	Description of this file as generated by the <File> autodoc rules below.
		-->

		<!-- Special header and footer pair for .h and .hpp files, which will automatically add an
		     include-once mechanism to the file.

		<file _filetypes=".h.hpp" _addfooter="true" _separators="false">
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%

			#ifndef INC_%leafname%_H
			#define INC_%leafname%_H

		</file>
		<filefooter filetypes=".h.hpp" _separators="false">
			// end of %projectpathname%
			#endif	// INC_%leafname%_H
		</filefooter>
		-->

		<file>
			<prototype _punctuate="false">%projectpathname%</prototype>
			<_ />
			<summary />
		</file>

		<file-vb _separators="false">
			<prototype _punctuate="false">%projectpathname%</prototype>
			<_ />
			<summary />
		</file-vb>

		<!-- Free-form text example
		<file>
			// project:	%project%
			// file:	%projectpathname%
			//
			// summary:	%fileDescription%
			//
			//			%copyright%
			//
			//			Date		Developer		Change
			//			%date%	%user%	Created
		</file>
		-->

		<!-- Default plain-text AtomineerUtils file footer. These follow the same form as the file headers above -->
		<filefooter>
			// End of %projectpathname%
		</filefooter>

		<filefooter-vb _separators="false">
			'---------------------------------------------------------------------------------------------------
			' End of %projectpathname%
		</filefooter-vb>

		<!--
			Comment template for catch-all comments. These are added when the filetype of the document
			is not one of the core languages that AtomineerUtils can parse to auto-document. The
			separators and line headers used for each file extension (e.g. .html, .sql) are configured
			in your Prefs.xml, allowing AtomineerUtils to correctly insert simple "boilerplate" comments
			into any file format.
		-->
		<catchall>
			<summary />
			<_ />
			<remarks>%user%, %date%</remarks>
		</catchall>

		<!--
			Default namespace comment. As with file comments, you can use plain-text or XML commenting for
			this entry.
		-->
		<namespace>
			<prototype _punctuate="false" />
			<_ />
			<summary />
		</namespace>

		<typedef>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</typedef>

		<enum>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</enum>

		<bitfield>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</bitfield>

		<struct>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<sa _punctuate="false" _optional="true" />
		</struct>

		<class>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<param />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</class>

		<interface>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<param />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</interface>

		<def>			<!-- C/C++ #define macro -->
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<remarks>%user%, %date%</remarks>
			<_ />
			<param />
		</def>

		<method>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
			<_ />
			<returns />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</method>

		<property>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<value />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</property>

		<indexer>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<param />
			<_ />
			<value />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</indexer>

		<delegate>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
			<_ />
			<returns />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</delegate>

		<constructor>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
		</constructor>

		<destructor>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
		</destructor>

		<finaliser>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
		</finaliser>

		<operator>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
			<_ />
			<returns />
		</operator>

		<eventhandler>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
			<_ />
			<returns />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</eventhandler>

		<eventsender>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<author _punctuate="false">%user%</author>
			<date _punctuate="false">%date%</date>
			<_ />
			<exception />
			<_ />
			<param />
			<_ />
			<returns />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</eventsender>

		<!-- Templates for methods in abstract classes and interfaces -->
		<interfacemethod>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<param />
			<_ />
			<returns />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</interfacemethod>

		<interfaceproperty>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<value />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</interfaceproperty>

		<interfaceindexer>
			<prototype _punctuate="false" />
			<_ />
			<summary />
			<_ />
			<param />
			<_ />
			<value />
			<_ />
			<sa _punctuate="false" _optional="true" />
		</interfaceindexer>
	</DoxygenTemplates>